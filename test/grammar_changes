changes made to the productions of decaf grammar to enforce precedence of operators and to remove left recursion

replace the production :

<expr> → <location>
| <method_call>
| <literal>
| <expr> <bin_op> <expr>
| - <expr>
| ! <expr>
| ( <expr> )

with

expr -> bool { || bool }*
bool -> eq { && eq }*
eq -> rel { == rel }* | rel { != rel }*
rel -> term { < term }* | term { <= term }* | term { > term }* | term { >= term }*
term -> factor { + factor }* | factor { - factor }*
factor -> expr1 { * expr1 }* | expr1 { / expr1 }* | expr1 { % expr1 }*

<expr1> → <location>
| <method_call>
| <literal>
| - <expr>
| ! <expr>
| ( <expr> )


how the above grammar was obtained : (refer dragon book 2.2.6)

example:

E -> E / E | E + E | digit             // this grammar has ambiguity with precedence of operators and left recursion

2 level of precedence for / and +,  so add 2 non terminals

E 	-> E + factor | factor		-> factor { + factor }*
factor 	-> factor / term | term		-> term { / term }*
term 	-> digit

